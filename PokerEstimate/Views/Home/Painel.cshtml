@model PokerEstimate.Models.Sala
@using PokerEstimate.Models
@using System.Globalization
@{
    ViewData["Title"] = "Painel";
    var sala = ViewBag.Sala as Sala;
    var usuario = ViewBag.Usuario as Usuario;
    var nomeUsuario = ViewBag.NomeUsuario as string;
    var ehCriador = (bool)ViewBag.EhCriador;
}
<div class="container mb-3">

    <h1 class="text-center fs-2">Sala de Estimativas</h1>
    <div class="row justify-content-center">
        <div class="col-auto">
            <p><b>ID da Sala:</b> @sala!.Id</p>
        </div>
        <div class="col-auto">
            <p><b>Criador:</b> @sala.Criador</p>
        </div>
    </div>

    <div id="painel">
        <h2 class="text-center fs-3">Bem-vindo, @nomeUsuario!</h2>

        <div style="text-align: center; margin: 5px 0;">
            <h3 class="fs-4">Selecione sua estimativa:</h3>

            <form id="registrar-estimativa" asp-action="RegistrarEstimativa" method="post" style="text-align: center;">
                <input type="hidden" name="id" value="@sala.Id" />
                <input type="hidden" name="nome" value="@nomeUsuario" />
                <input type="hidden" name="ponto" value="" />

                <!-- Botão para opção com imagem de xícara -->
                <button value="coffee" type="submit" onclick="destacarBotao(this)"
                    style="padding: 20px 30px; margin: 5px;">
                    <span class="material-icons">coffee</span>
                </button>

                <!-- Botão para interrogação -->
                <button value="?" type="submit" onclick="destacarBotao(this)"
                    style="padding: 20px 30px; margin: 5px;">?</button>

                <!-- Botões para valores de 0 a 3.5 -->
                @for (double i = 0; i <= 3.5; i += (i < 0 ? 1 : 0.5))
                {
                    <button value='@i' type="submit" onclick="destacarBotao(this)"
                        style="padding: 20px 30px; margin: 5px;">@i</button>
                }

                <!-- Botões para valores de 4 a 13 -->
                @for (int i = 4; i <= 13; i++)
                {
                    <button value='@i' type="submit" onclick="destacarBotao(this)"
                        style="padding: 20px 30px; margin: 5px;">@i</button>
                }
            </form>

        </div>
    </div>

    @if (ehCriador)
    {
        <div style="text-align: center; margin-top: 20px;">
            <form id="formLimparVotos" asp-action="DeletarVotos" method="post" style="display: inline-block;">
                <input type="hidden" name="id" value="@sala.Id" />
                <input type="hidden" name="nomeCriador" value="@sala.Criador" />
                <button type="submit" style="padding: 10px 20px; margin-right: 10px;">Limpar Votos</button>
            </form>

            <form id="formExibirResultado" asp-action="ExibirResultados" method="post" style="display: inline-block;">
                <input type="hidden" name="id" value="@sala.Id" />
                <input type="hidden" name="nomeCriador" value="@sala.Criador" />
                <button id="btnExibirResultado" type="submit" style="padding: 10px 20px;">Exibir
                    Resultados</button>
            </form>
        </div>
    }

    <div class="row d-flex justify-content-center">
        <div class="col-6">
            <h3 style="text-align: center; margin-top: 20px;">Resultado</h3>
            <table class="table border-success table-bordered">
                <thead>
                    <tr style="border-bottom: 2px solid black; background-color: #f2f2f2;">
                        <th style="padding: 10px; text-align: left; width: 55%">Nome</th>
                        <th style="padding: 10px; text-align: left; width: 45%">Story Point</th>
                    </tr>
                </thead>
                <tbody id="tabelaUsuarios">
                </tbody>
            </table>
        </div>

        <div id="divEstimativa" class="col-6" hidden>
            <h3 style="text-align: center; margin-top: 20px;">Estimativa</h3>
            <table class="table border-success table-bordered">
                <thead>
                    <tr style="border-bottom: 2px solid black; background-color: #f2f2f2;">
                        <th>Pontuação Final</th>
                        <th>Pontuação Dev</th>
                        <th>Pontuação QA</th>
                        <th>Voto Criador</th>
                    </tr>
                </thead>
                <tbody id="tabelaEstimativa">
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>

    const idSala = '@sala.Id';
    const tbody = document.getElementById('tabelaUsuarios');
    const btnExibirResultados = document.getElementById("btnExibirResultado");
    const formEstimativa = document.getElementById('registrar-estimativa');
    const formExibirResultado = document.getElementById('formExibirResultado');
    const formLimparVotos = document.getElementById('formLimparVotos');
    const divEstimativa = document.getElementById('divEstimativa');
    const usuarios =@Html.Raw(Json.Serialize(@sala.Usuarios));
    const sala =@Html.Raw(Json.Serialize(@sala));
    const mostrarResultado =@Html.Raw(Json.Serialize(@sala.ExibirResultados));
    const usuario =@Html.Raw(Json.Serialize(@usuario));

    window.onload = () => {
        divEstimativa.hidden = !mostrarResultado
        usuarios.forEach(usuario => adicionarUsuarioAoGrid(usuario, mostrarResultado))
        alterarStatusFormularios(!mostrarResultado)

        if (mostrarResultado) {
            renderizarEstimativa(sala.estimativa)
        }

        window.signalRConnection.initializeSignalRConnection()
            .then(() => {
                if (window.signalRConnection.connection) {
                    window.signalRConnection.connection.on("UsuarioEntrou", function (usuario) {
                        adicionarUsuario(usuario);
                    });

                    window.signalRConnection.connection.on("AtualizarVoto", function (usuario) {
                        atualizarVoto(usuario)
                    });

                    window.signalRConnection.connection.on("ExibirResultados", function (sala) {
                        exibirResultado(sala)
                    })

                    window.signalRConnection.connection.on("LimparVotos", function (usuarios) {
                        limparVotos(usuarios)
                    })

                    formEstimativa.onsubmit = async (event) => {
                        await submitEstimativa(event)
                    }

                    if (btnExibirResultados) {
                        formExibirResultado.onsubmit = async (event) => {
                            await submitResultado(event)
                        }
                        formLimparVotos.onsubmit = async (event) => {
                            await submitLimparVotos(event)
                        }
                    }

                    entrarNaSala()
                        .then(() => { console.log(`Usuário ${usuario.nome} entrou na sala`) })
                        .catch((err) => { console.error(err.toString()) })
                }
            }).catch((err) => console.error(err.toString()));
    }

    async function entrarNaSala() {
        await window.signalRConnection.connection.invoke("EntrarSala", usuario, idSala)
    }

    function adicionarUsuario(usuario) {
        const usuarioExistente = document.querySelector(`#usuario-${usuario.nome.replace(/\s/g, '-')}`);
        if (!usuarioExistente) {
            adicionarUsuarioAoGrid(usuario)
        }
    }

    function atualizarVoto(usuario) {
        const usuarioItem = document.getElementById(`usuario-${usuario.nome.replace(/\s/g, '-')}`);
        if (usuarioItem) {
            usuarioItem.children[1].innerHTML = formatarPontuacao(usuario);
        }
    }

    function exibirResultado(sala) {
        alterarStatusFormularios(false)
        renderizarEstimativa(sala.estimativa, Array.from(sala.usuarios).find(u => u.tipoUsuario == 0))

        tbody.innerHTML = '';
        sala.usuarios.forEach(usuario => {
            adicionarUsuarioAoGrid(usuario, true)
        });
    }

    function limparVotos(usuarios) {
        alterarStatusFormularios(true)
        divEstimativa.hidden = true;
        tbody.innerHTML = ""

        usuarios.forEach(usuario => {
            adicionarUsuarioAoGrid(usuario)
        });
        // Remover destaque de todos os botões
        const botoes = document.querySelectorAll('button');
        botoes.forEach(botao => botao.classList.remove('destaque'));
    }

    function alterarStatusFormularios(habilitar) {
        const botoes = formEstimativa.querySelectorAll("button")
        botoes.forEach(button => {
            button.disabled = !habilitar
            if (habilitar) {
                button.classList.remove('buttonsDisabled');
            } else {
                button.classList.add('buttonsDisabled');
            }
        })
    }

    function adicionarUsuarioAoGrid(usuario, mostrarResultado = false) {
        const tr = document.createElement('tr');
        tr.id = `usuario-${usuario.nome.replace(/\s/g, '-')}`

        const tdNome = document.createElement('td');
        tdNome.style.padding = '10px';
        tdNome.textContent = `${usuario.nome} -- ${usuario.tipoUsuario == 0
            ? 'Criador' : usuario.tipoUsuario == 1 ? 'DEV' : 'QA'}`;

        const tdPonto = document.createElement('td');
        tdPonto.style.padding = '10px';
        tdPonto.innerHTML = formatarPontuacao(usuario, mostrarResultado)

        tr.appendChild(tdNome);
        tr.appendChild(tdPonto);

        tbody.appendChild(tr);
    }

    async function submitEstimativa(event) {
        event.preventDefault();

        const form = event.target;
        const botaoClicado = event.submitter;
        const valorBotao = botaoClicado.value;

        form.querySelector('[name="ponto"]').value = valorBotao;

        try {
            const resposta = await submeterFormulario(form);
            if (resposta === true) {
                await window.signalRConnection.connection.invoke("AtualizarVoto", usuario.nome, idSala);
            }
        } catch (err) {
            console.error("Erro ao enviar estimativa:", err);
        }
    }

    async function submitResultado(event) {
        event.preventDefault();

        try {
            const resposta = await submeterFormulario(event.target);
            if (resposta === true) {
                await window.signalRConnection.connection.invoke("ExibirResultados", idSala);
            }
        } catch (err) {
            console.error("Erro ao exibir resultados:", err);
        }
    }

    async function submitLimparVotos(event) {
        event.preventDefault();
        try {
            const resposta = await submeterFormulario(event.target);
            if (resposta === true) {
                await window.signalRConnection.connection.invoke("LimparVotos", idSala);
            }
        } catch (err) {
            console.error("Erro ao limpar votos:", err);
        }
    }

    function submeterFormulario(form) {
        return new Promise((resolve, reject) => {
            fetch(form.action, {
                method: 'POST',
                body: new FormData(form)
            })
                .then(response => {
                    if (response.ok) {
                        resolve(true);
                    } else {
                        reject("Erro ao submeter formulário");
                    }
                })
                .catch(err => {
                    reject(err);
                });
        });
    }

    function formatarPontuacao(usuario, mostrarResultado) {
        if (mostrarResultado && usuario.ponto) {
            return usuario.ponto == 'coffee'
                ? obterIcone('coffee')
                : `<span class="fw-bold">${usuario.ponto}</span>`;
        }

        const icone = usuario.ponto == 'coffee'
            ? 'coffee'
            : !mostrarResultado && usuario.ponto
                ? 'thumb_up'
                : 'thumb_down';

        return obterIcone(icone);
    }

    function obterIcone(nomeIcone) {
        return `<span class="material-icons">${nomeIcone}</span>`;
    }


    function destacarBotao(botao) {
        // Remove o destaque de todos os botões antes de destacar o clicado
        const botoes = document.querySelectorAll('button');
        botoes.forEach(b => b.classList.remove('destaque'));

        // Adiciona a classe de destaque ao botão clicado
        botao.classList.add('destaque');
    }

    function renderizarEstimativa(estimativa, criador) {
        divEstimativa.hidden = false;
        const tbody = document.getElementById('tabelaEstimativa');
        const tr = document.createElement('tr');
        tbody.innerHTML = ''

        const propriedades = [
            { nome: 'PontuacaoFinal', formatar: (u) => u.valorFinal },
            { nome: 'PontuacaoDev', formatar: (u) => u.valorFinalDevs },
            { nome: 'PontuacaoQA', formatar: (u) => u.valorFinalQas },
        ];

        propriedades.forEach((propriedade) => {
            const td = document.createElement('td');
            td.style.padding = '10px';
            td.textContent = propriedade.formatar(estimativa);
            tr.appendChild(td);
        });

        const tdVotoCriador = document.createElement('td');
        tdVotoCriador.style.padding = '10px';
        tdVotoCriador.innerHTML = formatarPontuacao(criador, true);
        tr.appendChild(tdVotoCriador);

        tbody.appendChild(tr);
    }
</script>